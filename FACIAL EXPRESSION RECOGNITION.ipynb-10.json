{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c681d6a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.models import Model , Sequential\n",
    "import seaborn as sns \n",
    "from tensorflow.keras.layers import BatchNormalization, Activation, MaxPooling2D ,Conv2D\n",
    "from keras.layers import Activation , Dropout , Flatten , Dense \n",
    "from keras import backend as K\n",
    "from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "from keras.models import load_model\n",
    "import cv2\n",
    "from keras.callbacks import ModelCheckpoint, EarlyStopping , ReduceLROnPlateau\n",
    "import tensorflow as tf \n",
    "from keras.preprocessing import image \n",
    "from keras.preprocessing.image import img_to_array\n",
    "from IPython.display import SVG, Image\n",
    "from PIL import Image\n",
    "from IPython import display\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1bf214ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 28709 images belonging to 7 classes.\n",
      "Found 7178 images belonging to 7 classes.\n"
     ]
    }
   ],
   "source": [
    "img_size = 48\n",
    "batch_size = 64\n",
    "datagen_train = ImageDataGenerator(horizontal_flip = True)\n",
    "datagen_validation = ImageDataGenerator(horizontal_flip = True)\n",
    "train_generator = datagen_train.flow_from_directory('/Users/shreeyarao/Desktop/train' , target_size = (img_size , img_size) , color_mode = 'grayscale', batch_size = batch_size , class_mode = 'categorical' , shuffle = True)\n",
    "validation_generator = datagen_train.flow_from_directory('/Users/shreeyarao/Desktop/test' , target_size = (img_size , img_size) , color_mode = 'grayscale', batch_size = batch_size , class_mode = 'categorical' , shuffle = True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3239c823",
   "metadata": {},
   "source": [
    "CNN MODEL\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "19e59c60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d (Conv2D)              (None, 48, 48, 64)        640       \n",
      "_________________________________________________________________\n",
      "batch_normalization (BatchNo (None, 48, 48, 64)        256       \n",
      "_________________________________________________________________\n",
      "activation (Activation)      (None, 48, 48, 64)        0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 24, 24, 64)        0         \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 24, 24, 64)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_1 (Conv2D)            (None, 24, 24, 128)       204928    \n",
      "_________________________________________________________________\n",
      "batch_normalization_1 (Batch (None, 24, 24, 128)       512       \n",
      "_________________________________________________________________\n",
      "activation_1 (Activation)    (None, 24, 24, 128)       0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 12, 12, 128)       0         \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 12, 12, 128)       0         \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 12, 12, 128)       409728    \n",
      "_________________________________________________________________\n",
      "batch_normalization_2 (Batch (None, 12, 12, 128)       512       \n",
      "_________________________________________________________________\n",
      "activation_2 (Activation)    (None, 12, 12, 128)       0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2 (None, 6, 6, 128)         0         \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 6, 6, 128)         0         \n",
      "_________________________________________________________________\n",
      "conv2d_3 (Conv2D)            (None, 6, 6, 512)         590336    \n",
      "_________________________________________________________________\n",
      "batch_normalization_3 (Batch (None, 6, 6, 512)         2048      \n",
      "_________________________________________________________________\n",
      "activation_3 (Activation)    (None, 6, 6, 512)         0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_3 (MaxPooling2 (None, 3, 3, 512)         0         \n",
      "_________________________________________________________________\n",
      "dropout_3 (Dropout)          (None, 3, 3, 512)         0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 4608)              0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 256)               1179904   \n",
      "_________________________________________________________________\n",
      "batch_normalization_4 (Batch (None, 256)               1024      \n",
      "_________________________________________________________________\n",
      "activation_4 (Activation)    (None, 256)               0         \n",
      "_________________________________________________________________\n",
      "dropout_4 (Dropout)          (None, 256)               0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 512)               131584    \n",
      "_________________________________________________________________\n",
      "batch_normalization_5 (Batch (None, 512)               2048      \n",
      "_________________________________________________________________\n",
      "activation_5 (Activation)    (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dropout_5 (Dropout)          (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 7)                 3591      \n",
      "=================================================================\n",
      "Total params: 2,527,111\n",
      "Trainable params: 2,523,911\n",
      "Non-trainable params: 3,200\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(64,(3,3), padding = 'same' , input_shape = (48,48,1)))\n",
    "\n",
    "#we have added here a Conv2D nd passes in 64 filters each of 3X3 with same padding and a specific input shape of 48,48\n",
    "# here 1 in 48,48,1 refers to the fact that the image is in grayscale \n",
    "\n",
    "#add batch normalization and activation function\n",
    "\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size = (2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "#2nd Conv Layer \n",
    "\n",
    "model.add(Conv2D(128,(5,5), padding = 'same' , input_shape = (48,48,1)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size = (2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "#3rd Conv Layer \n",
    "\n",
    "model.add(Conv2D(128,(5,5), padding = 'same' , input_shape = (48,48,1)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size = (2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "#4th Conv Layer\n",
    "\n",
    "model.add(Conv2D(512,(3,3), padding = 'same' , input_shape = (48,48,1)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size = (2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "#end of Conv layers\n",
    "\n",
    "#flatten the output \n",
    "model.add(Flatten())\n",
    "\n",
    "#addition of fully connected layers\n",
    "\n",
    "model.add(Dense(256))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Dense(512))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "\n",
    "model.add(Dense(7, activation= 'softmax'))\n",
    "opt = Adam( learning_rate = 0.0005)\n",
    "model.compile(optimizer = opt , loss = 'categorical_crossentropy' , metrics = ['accuracy'])\n",
    "model.summary()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2aa4ced0",
   "metadata": {},
   "source": [
    "TRAINING AND EVALUATING THE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a2d3a359",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "448/448 [==============================] - 643s 1s/step - loss: 1.8136 - accuracy: 0.3013 - val_loss: 1.6924 - val_accuracy: 0.3788\n",
      "\n",
      "Epoch 00001: saving model to model_weights.h5\n",
      "Epoch 2/15\n",
      "448/448 [==============================] - 677s 2s/step - loss: 1.5081 - accuracy: 0.4215 - val_loss: 1.3651 - val_accuracy: 0.4780\n",
      "\n",
      "Epoch 00002: saving model to model_weights.h5\n",
      "Epoch 3/15\n",
      "448/448 [==============================] - 622s 1s/step - loss: 1.3577 - accuracy: 0.4809 - val_loss: 1.3138 - val_accuracy: 0.4773\n",
      "\n",
      "Epoch 00003: saving model to model_weights.h5\n",
      "Epoch 4/15\n",
      "448/448 [==============================] - 684s 2s/step - loss: 1.2747 - accuracy: 0.5146 - val_loss: 1.3530 - val_accuracy: 0.4852\n",
      "\n",
      "Epoch 00004: saving model to model_weights.h5\n",
      "Epoch 5/15\n",
      "448/448 [==============================] - 1163s 3s/step - loss: 1.2161 - accuracy: 0.5375 - val_loss: 1.4326 - val_accuracy: 0.4442\n",
      "\n",
      "Epoch 00005: saving model to model_weights.h5\n",
      "Epoch 6/15\n",
      "448/448 [==============================] - 624s 1s/step - loss: 1.1812 - accuracy: 0.5483 - val_loss: 1.1708 - val_accuracy: 0.5506\n",
      "\n",
      "Epoch 00006: saving model to model_weights.h5\n",
      "Epoch 7/15\n",
      "448/448 [==============================] - 648s 1s/step - loss: 1.1479 - accuracy: 0.5642 - val_loss: 1.1443 - val_accuracy: 0.5691\n",
      "\n",
      "Epoch 00007: saving model to model_weights.h5\n",
      "Epoch 8/15\n",
      "448/448 [==============================] - 676s 2s/step - loss: 1.1190 - accuracy: 0.5763 - val_loss: 1.3534 - val_accuracy: 0.4996\n",
      "\n",
      "Epoch 00008: saving model to model_weights.h5\n",
      "Epoch 9/15\n",
      "448/448 [==============================] - 667s 1s/step - loss: 1.0921 - accuracy: 0.5848 - val_loss: 1.1222 - val_accuracy: 0.5703\n",
      "\n",
      "Epoch 00009: saving model to model_weights.h5\n",
      "Epoch 10/15\n",
      "448/448 [==============================] - 578s 1s/step - loss: 1.0741 - accuracy: 0.5908 - val_loss: 1.0545 - val_accuracy: 0.6021\n",
      "\n",
      "Epoch 00010: saving model to model_weights.h5\n",
      "Epoch 11/15\n",
      "448/448 [==============================] - 2304s 5s/step - loss: 1.0437 - accuracy: 0.6064 - val_loss: 1.1321 - val_accuracy: 0.5603\n",
      "\n",
      "Epoch 00011: saving model to model_weights.h5\n",
      "Epoch 12/15\n",
      "448/448 [==============================] - 658s 1s/step - loss: 1.0280 - accuracy: 0.6131 - val_loss: 1.0388 - val_accuracy: 0.6095\n",
      "\n",
      "Epoch 00012: saving model to model_weights.h5\n",
      "Epoch 13/15\n",
      "448/448 [==============================] - 627s 1s/step - loss: 1.0079 - accuracy: 0.6213 - val_loss: 1.0796 - val_accuracy: 0.5912\n",
      "\n",
      "Epoch 00013: saving model to model_weights.h5\n",
      "Epoch 14/15\n",
      "448/448 [==============================] - 685s 2s/step - loss: 0.9855 - accuracy: 0.6266 - val_loss: 1.0971 - val_accuracy: 0.5917\n",
      "\n",
      "Epoch 00014: saving model to model_weights.h5\n",
      "Epoch 15/15\n",
      "448/448 [==============================] - 625s 1s/step - loss: 0.9732 - accuracy: 0.6330 - val_loss: 1.0336 - val_accuracy: 0.6124\n",
      "\n",
      "Epoch 00015: saving model to model_weights.h5\n"
     ]
    }
   ],
   "source": [
    "epochs = 15\n",
    "steps_per_epoch = train_generator.n // train_generator.batch_size\n",
    "validation_steps = validation_generator.n // validation_generator.batch_size\n",
    "checkpoint = ModelCheckpoint('model_weights.h5' , monitor = 'val_accuracy' , save_weights_only = True , mode = 'max', verbose = 1)\n",
    "\n",
    "early_stopping = EarlyStopping(   monitor = 'val_loss' , min_delta = 0 , patience = 3 , verbose = 1, restore_best_weights = True)\n",
    "\n",
    "reduce_learningrate =  ReduceLROnPlateau( monitor = 'val_loss' , factor = 0.2 , patience = 3 , verbose = 1 , min_delta = 0.0001)\n",
    "\n",
    "\n",
    "\n",
    "callbacks_list = [early_stopping , checkpoint ,  reduce_learningrate]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "history = model.fit(\n",
    "          x=train_generator,\n",
    "                                steps_per_epoch=train_generator.n//train_generator.batch_size,\n",
    "                                epochs=epochs,\n",
    "                                validation_data = validation_generator,\n",
    "                               validation_steps = validation_generator.n // validation_generator.batch_size , \n",
    "                                callbacks=callbacks_list\n",
    "  \n",
    "    )\n",
    "\n",
    "\n",
    "\n",
    "model.save(\"model.h5\")\n",
    "model.load_weights('model.h5')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "097e4f6f",
   "metadata": {},
   "source": [
    "\n",
    "        open cv part\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a934c0ab",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9edb0a52",
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier  = load_model('model.h5')\n",
    "face_classifier = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n",
    "emotion_labels = ['Angry','Disgust','Fear' ,'Happy','Neutral','Sad','Surprise']\n",
    "\n",
    "cap = cv2.VideoCapture(0) \n",
    "\n",
    "while True:\n",
    "    \n",
    "    _, frame = cap.read()\n",
    "    labels = []\n",
    "    gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)\n",
    "    faces = face_classifier.detectMultiScale(gray)\n",
    "    \n",
    "    \n",
    "    \n",
    "    for (x,y,w,h) in faces:\n",
    "        cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,255),2)\n",
    "        roi_gray = gray[y:y+h,x:x+w]\n",
    "        roi_gray = cv2.resize(roi_gray,(48,48),interpolation=cv2.INTER_AREA)\n",
    "        \n",
    "        \n",
    "        if np.sum([roi_gray])!=0:\n",
    "            roi = roi_gray.astype('float')/255.0\n",
    "            roi = img_to_array(roi)\n",
    "            roi = np.expand_dims(roi,axis=0)\n",
    "\n",
    "            prediction = classifier.predict(roi)[0]\n",
    "            \n",
    "            label = emotion_labels[prediction.argmax()]\n",
    "            \n",
    "            label_position = (x,y-10)\n",
    "            cv2.putText(frame,label,label_position,cv2.FONT_HERSHEY_SIMPLEX,1,(0,255,0),2)\n",
    "        else:\n",
    "            cv2.putText(frame,'No Faces',(30,80),cv2.FONT_HERSHEY_SIMPLEX,1,(0,255,0),2)\n",
    "    cv2.imshow('Emotion Detector',frame)\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        break\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n",
    "        \n",
    "        \n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d930f8d1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "992787dc",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d13603a8",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
